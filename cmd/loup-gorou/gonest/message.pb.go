// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.20.1
// 	protoc        v3.6.1
// source: message.proto

package gonest

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//Defini le type de message
type MessageType int32

const (
	MessageType_ITSHIM           MessageType = 0
	MessageType_ACK              MessageType = 1
	MessageType_CHAT             MessageType = 2
	MessageType_IPLIST           MessageType = 3
	MessageType_VOTE             MessageType = 4
	MessageType_WITCH            MessageType = 5
	MessageType_CUPID            MessageType = 6
	MessageType_HUNTER           MessageType = 7
	MessageType_CLAIRVOYANT      MessageType = 8
	MessageType_HELLO            MessageType = 9
	MessageType_LEADERELECTION   MessageType = 10
	MessageType_ROLEDISTRIBUTION MessageType = 11
	MessageType_DEAD             MessageType = 12
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0:  "ITSHIM",
		1:  "ACK",
		2:  "CHAT",
		3:  "IPLIST",
		4:  "VOTE",
		5:  "WITCH",
		6:  "CUPID",
		7:  "HUNTER",
		8:  "CLAIRVOYANT",
		9:  "HELLO",
		10: "LEADERELECTION",
		11: "ROLEDISTRIBUTION",
		12: "DEAD",
	}
	MessageType_value = map[string]int32{
		"ITSHIM":           0,
		"ACK":              1,
		"CHAT":             2,
		"IPLIST":           3,
		"VOTE":             4,
		"WITCH":            5,
		"CUPID":            6,
		"HUNTER":           7,
		"CLAIRVOYANT":      8,
		"HELLO":            9,
		"LEADERELECTION":   10,
		"ROLEDISTRIBUTION": 11,
		"DEAD":             12,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

//Message de base que l'on va envoyé dans nos échanges entre clients
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Type de message
	MessageType MessageType `protobuf:"varint,1,opt,name=messageType,proto3,enum=gonest.MessageType" json:"messageType,omitempty"`
	//onof est un attribut qui nous permet de choisir un des type listé dans celui-ci
	//
	// Types that are assignable to Body:
	//	*Event_AckMessage
	//	*Event_ItsHimMessage
	//	*Event_ChatMessage
	//	*Event_IpListMessage
	//	*Event_VoteMessage
	//	*Event_WitchMessage
	//	*Event_CupidMessage
	//	*Event_HunterMessage
	//	*Event_ClairvoyantMessage
	//	*Event_HelloMessage
	//	*Event_LeaderElectionMessage
	//	*Event_RoleDistributionMessage
	//	*Event_DeadMessage
	Body isEvent_Body `protobuf_oneof:"body"`
	//adresse ip de la personne qui est à la source du message
	Source string `protobuf:"bytes,12,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetMessageType() MessageType {
	if x != nil {
		return x.MessageType
	}
	return MessageType_ITSHIM
}

func (m *Event) GetBody() isEvent_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *Event) GetAckMessage() *AckMessage {
	if x, ok := x.GetBody().(*Event_AckMessage); ok {
		return x.AckMessage
	}
	return nil
}

func (x *Event) GetItsHimMessage() *ItsHimMessage {
	if x, ok := x.GetBody().(*Event_ItsHimMessage); ok {
		return x.ItsHimMessage
	}
	return nil
}

func (x *Event) GetChatMessage() *ChatMessage {
	if x, ok := x.GetBody().(*Event_ChatMessage); ok {
		return x.ChatMessage
	}
	return nil
}

func (x *Event) GetIpListMessage() *IpListMessage {
	if x, ok := x.GetBody().(*Event_IpListMessage); ok {
		return x.IpListMessage
	}
	return nil
}

func (x *Event) GetVoteMessage() *VoteMessage {
	if x, ok := x.GetBody().(*Event_VoteMessage); ok {
		return x.VoteMessage
	}
	return nil
}

func (x *Event) GetWitchMessage() *WitchMessage {
	if x, ok := x.GetBody().(*Event_WitchMessage); ok {
		return x.WitchMessage
	}
	return nil
}

func (x *Event) GetCupidMessage() *CupidMessage {
	if x, ok := x.GetBody().(*Event_CupidMessage); ok {
		return x.CupidMessage
	}
	return nil
}

func (x *Event) GetHunterMessage() *HunterMessage {
	if x, ok := x.GetBody().(*Event_HunterMessage); ok {
		return x.HunterMessage
	}
	return nil
}

func (x *Event) GetClairvoyantMessage() *ClairvoyantMessage {
	if x, ok := x.GetBody().(*Event_ClairvoyantMessage); ok {
		return x.ClairvoyantMessage
	}
	return nil
}

func (x *Event) GetHelloMessage() *HelloMessage {
	if x, ok := x.GetBody().(*Event_HelloMessage); ok {
		return x.HelloMessage
	}
	return nil
}

func (x *Event) GetLeaderElectionMessage() *LeaderElectionMessage {
	if x, ok := x.GetBody().(*Event_LeaderElectionMessage); ok {
		return x.LeaderElectionMessage
	}
	return nil
}

func (x *Event) GetRoleDistributionMessage() *RoleDistributionMessage {
	if x, ok := x.GetBody().(*Event_RoleDistributionMessage); ok {
		return x.RoleDistributionMessage
	}
	return nil
}

func (x *Event) GetDeadMessage() *DeadMessage {
	if x, ok := x.GetBody().(*Event_DeadMessage); ok {
		return x.DeadMessage
	}
	return nil
}

func (x *Event) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type isEvent_Body interface {
	isEvent_Body()
}

type Event_AckMessage struct {
	AckMessage *AckMessage `protobuf:"bytes,3,opt,name=ackMessage,proto3,oneof"`
}

type Event_ItsHimMessage struct {
	ItsHimMessage *ItsHimMessage `protobuf:"bytes,2,opt,name=itsHimMessage,proto3,oneof"`
}

type Event_ChatMessage struct {
	ChatMessage *ChatMessage `protobuf:"bytes,4,opt,name=chatMessage,proto3,oneof"`
}

type Event_IpListMessage struct {
	IpListMessage *IpListMessage `protobuf:"bytes,5,opt,name=ipListMessage,proto3,oneof"`
}

type Event_VoteMessage struct {
	VoteMessage *VoteMessage `protobuf:"bytes,6,opt,name=voteMessage,proto3,oneof"`
}

type Event_WitchMessage struct {
	WitchMessage *WitchMessage `protobuf:"bytes,8,opt,name=witchMessage,proto3,oneof"`
}

type Event_CupidMessage struct {
	CupidMessage *CupidMessage `protobuf:"bytes,9,opt,name=cupidMessage,proto3,oneof"`
}

type Event_HunterMessage struct {
	HunterMessage *HunterMessage `protobuf:"bytes,10,opt,name=hunterMessage,proto3,oneof"`
}

type Event_ClairvoyantMessage struct {
	ClairvoyantMessage *ClairvoyantMessage `protobuf:"bytes,11,opt,name=clairvoyantMessage,proto3,oneof"`
}

type Event_HelloMessage struct {
	HelloMessage *HelloMessage `protobuf:"bytes,13,opt,name=helloMessage,proto3,oneof"`
}

type Event_LeaderElectionMessage struct {
	LeaderElectionMessage *LeaderElectionMessage `protobuf:"bytes,14,opt,name=leaderElectionMessage,proto3,oneof"`
}

type Event_RoleDistributionMessage struct {
	RoleDistributionMessage *RoleDistributionMessage `protobuf:"bytes,15,opt,name=roleDistributionMessage,proto3,oneof"`
}

type Event_DeadMessage struct {
	DeadMessage *DeadMessage `protobuf:"bytes,16,opt,name=deadMessage,proto3,oneof"`
}

func (*Event_AckMessage) isEvent_Body() {}

func (*Event_ItsHimMessage) isEvent_Body() {}

func (*Event_ChatMessage) isEvent_Body() {}

func (*Event_IpListMessage) isEvent_Body() {}

func (*Event_VoteMessage) isEvent_Body() {}

func (*Event_WitchMessage) isEvent_Body() {}

func (*Event_CupidMessage) isEvent_Body() {}

func (*Event_HunterMessage) isEvent_Body() {}

func (*Event_ClairvoyantMessage) isEvent_Body() {}

func (*Event_HelloMessage) isEvent_Body() {}

func (*Event_LeaderElectionMessage) isEvent_Body() {}

func (*Event_RoleDistributionMessage) isEvent_Body() {}

func (*Event_DeadMessage) isEvent_Body() {}

var File_message_proto protoreflect.FileDescriptor

var file_message_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x67, 0x6f, 0x6e, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x69, 0x74, 0x73, 0x48, 0x69, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x09, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x69, 0x70, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x63, 0x75, 0x70, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x68,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x63, 0x6c, 0x61,
	0x69, 0x72, 0x76, 0x6f, 0x79, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x72, 0x6f, 0x6c, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x64, 0x65,
	0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2, 0x07, 0x0a, 0x05, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x6e, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x63, 0x6b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x67, 0x6f, 0x6e, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x3d, 0x0a, 0x0d, 0x69, 0x74, 0x73, 0x48, 0x69, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6e, 0x65, 0x73, 0x74, 0x2e,
	0x49, 0x74, 0x73, 0x48, 0x69, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x0d, 0x69, 0x74, 0x73, 0x48, 0x69, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x6e, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x69, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x67, 0x6f, 0x6e, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x76, 0x6f, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f,
	0x6e, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x76, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x3a, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6e, 0x65, 0x73, 0x74, 0x2e, 0x57,
	0x69, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x63,
	0x75, 0x70, 0x69, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6e, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x75, 0x70, 0x69, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x75, 0x70, 0x69, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x68, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x67, 0x6f, 0x6e, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x68, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x12, 0x63, 0x6c, 0x61, 0x69, 0x72, 0x76,
	0x6f, 0x79, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6e, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6c, 0x61, 0x69,
	0x72, 0x76, 0x6f, 0x79, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x12, 0x63, 0x6c, 0x61, 0x69, 0x72, 0x76, 0x6f, 0x79, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6e,
	0x65, 0x73, 0x74, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x0c, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x55, 0x0a, 0x15, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6e, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x15, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5b, 0x0a, 0x17, 0x72, 0x6f, 0x6c, 0x65, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6e, 0x65, 0x73,
	0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x17, 0x72, 0x6f, 0x6c,
	0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x6e, 0x65,
	0x73, 0x74, 0x2e, 0x44, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x0b, 0x64, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x2a, 0xb4, 0x01,
	0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x49, 0x54, 0x53, 0x48, 0x49, 0x4d, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x43, 0x4b,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x48, 0x41, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x49, 0x50, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x4f, 0x54, 0x45,
	0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0x05, 0x12, 0x09, 0x0a,
	0x05, 0x43, 0x55, 0x50, 0x49, 0x44, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x55, 0x4e, 0x54,
	0x45, 0x52, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4c, 0x41, 0x49, 0x52, 0x56, 0x4f, 0x59,
	0x41, 0x4e, 0x54, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x45, 0x4c, 0x4c, 0x4f, 0x10, 0x09,
	0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x4f, 0x4c, 0x45, 0x44, 0x49, 0x53, 0x54,
	0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45,
	0x41, 0x44, 0x10, 0x0c, 0x42, 0x08, 0x5a, 0x06, 0x67, 0x6f, 0x6e, 0x65, 0x73, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_message_proto_rawDescOnce sync.Once
	file_message_proto_rawDescData = file_message_proto_rawDesc
)

func file_message_proto_rawDescGZIP() []byte {
	file_message_proto_rawDescOnce.Do(func() {
		file_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_proto_rawDescData)
	})
	return file_message_proto_rawDescData
}

var file_message_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_message_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_message_proto_goTypes = []interface{}{
	(MessageType)(0),                // 0: gonest.MessageType
	(*Event)(nil),                   // 1: gonest.Event
	(*AckMessage)(nil),              // 2: gonest.AckMessage
	(*ItsHimMessage)(nil),           // 3: gonest.ItsHimMessage
	(*ChatMessage)(nil),             // 4: gonest.ChatMessage
	(*IpListMessage)(nil),           // 5: gonest.IpListMessage
	(*VoteMessage)(nil),             // 6: gonest.VoteMessage
	(*WitchMessage)(nil),            // 7: gonest.WitchMessage
	(*CupidMessage)(nil),            // 8: gonest.CupidMessage
	(*HunterMessage)(nil),           // 9: gonest.HunterMessage
	(*ClairvoyantMessage)(nil),      // 10: gonest.ClairvoyantMessage
	(*HelloMessage)(nil),            // 11: gonest.HelloMessage
	(*LeaderElectionMessage)(nil),   // 12: gonest.LeaderElectionMessage
	(*RoleDistributionMessage)(nil), // 13: gonest.RoleDistributionMessage
	(*DeadMessage)(nil),             // 14: gonest.DeadMessage
}
var file_message_proto_depIdxs = []int32{
	0,  // 0: gonest.Event.messageType:type_name -> gonest.MessageType
	2,  // 1: gonest.Event.ackMessage:type_name -> gonest.AckMessage
	3,  // 2: gonest.Event.itsHimMessage:type_name -> gonest.ItsHimMessage
	4,  // 3: gonest.Event.chatMessage:type_name -> gonest.ChatMessage
	5,  // 4: gonest.Event.ipListMessage:type_name -> gonest.IpListMessage
	6,  // 5: gonest.Event.voteMessage:type_name -> gonest.VoteMessage
	7,  // 6: gonest.Event.witchMessage:type_name -> gonest.WitchMessage
	8,  // 7: gonest.Event.cupidMessage:type_name -> gonest.CupidMessage
	9,  // 8: gonest.Event.hunterMessage:type_name -> gonest.HunterMessage
	10, // 9: gonest.Event.clairvoyantMessage:type_name -> gonest.ClairvoyantMessage
	11, // 10: gonest.Event.helloMessage:type_name -> gonest.HelloMessage
	12, // 11: gonest.Event.leaderElectionMessage:type_name -> gonest.LeaderElectionMessage
	13, // 12: gonest.Event.roleDistributionMessage:type_name -> gonest.RoleDistributionMessage
	14, // 13: gonest.Event.deadMessage:type_name -> gonest.DeadMessage
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_message_proto_init() }
func file_message_proto_init() {
	if File_message_proto != nil {
		return
	}
	file_itsHim_proto_init()
	file_hello_proto_init()
	file_ack_proto_init()
	file_chat_proto_init()
	file_iplist_proto_init()
	file_witch_proto_init()
	file_cupid_proto_init()
	file_vote_proto_init()
	file_hunter_proto_init()
	file_clairvoyant_proto_init()
	file_leaderelection_proto_init()
	file_roledistribution_proto_init()
	file_dead_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_message_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Event_AckMessage)(nil),
		(*Event_ItsHimMessage)(nil),
		(*Event_ChatMessage)(nil),
		(*Event_IpListMessage)(nil),
		(*Event_VoteMessage)(nil),
		(*Event_WitchMessage)(nil),
		(*Event_CupidMessage)(nil),
		(*Event_HunterMessage)(nil),
		(*Event_ClairvoyantMessage)(nil),
		(*Event_HelloMessage)(nil),
		(*Event_LeaderElectionMessage)(nil),
		(*Event_RoleDistributionMessage)(nil),
		(*Event_DeadMessage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_proto_goTypes,
		DependencyIndexes: file_message_proto_depIdxs,
		EnumInfos:         file_message_proto_enumTypes,
		MessageInfos:      file_message_proto_msgTypes,
	}.Build()
	File_message_proto = out.File
	file_message_proto_rawDesc = nil
	file_message_proto_goTypes = nil
	file_message_proto_depIdxs = nil
}
